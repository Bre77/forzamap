<html>
    <head>
        <title>Forza Horizon 5 Map</title>
        <meta name="description" content="Realtime map for Forza Horizon 5">
        <meta name="keywords" content="Forza, Horizon, FH5, Map, Forza Horizon 5, telemetry">
        <meta name="author" content="Brett Adams">
        <script src="/uid.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-EW032TKLN6"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-EW032TKLN6');
        </script>
        <style>
            body {
                margin: 0;
                padding: 0;
                background-color: black;
            }
            a, a:hover, a:visited, a:active {
                color: inherit;
            }
            #map {
                background-image: url('map.jpg');
                background-repeat: no-repeat;
                background-attachment: fixed;
                background-size: auto;
                width: 100%;
                height: 100%;
                position: absolute;
                left:0;
                top:0;
                overflow: hidden;
            }
            #text {
                font-family: monospace;
                position: absolute;
                left:0;
                bottom:0;
                padding: 0.5em;
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
            }
            .arrows {
                position: absolute;
                height: 24px;
                width: 24px;
            }
            #help {
                position: absolute;
                left:0;
                right:0;
                top:0;
                bottom:0;
                margin: auto;
                height: 22em;
                width: 80%;
                background-color: rgba(255, 255, 255, 0.9);
                border: 2px solid black;
                padding: 1em;
                font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
                text-align: center;
                overflow: hidden;
            }
            #close {
                position: absolute;
                top:0;
                right:0;
                padding: 0.5em;
            }
        </style>

    </head>
    <body>
        <div id="app">
            <div id="map" :style="map">
                <svg v-for="car,id in cars" class="arrows" viewBox="0 0 24 24" :style="position(car.x,car.y,car.d,car.z)" :id="id">
                    <path v-if="id == 'GYSnVQlloFNfdImFRmJg+Q=='" fill="rgb(0,128,255)" stroke="white" d="M12,2L4.5,20.29L5.21,21L12,18L18.79,21L19.5,20.29L12,2Z"/>
                    <path v-else :fill="`rgb(${255-Math.min(car.s,100)*2.5},${Math.min(car.s,100)*2.5},0)`" stroke="black" d="M12,2L4.5,20.29L5.21,21L12,18L18.79,21L19.5,20.29L12,2Z"/>
                </svg>
                <svg v-if="seen" class="arrows" viewBox="0 0 24 24" :style="playerstyle">
                    <path :fill="`rgb(${255-Math.min(players,100)*2.5},${255-Math.min(players,100)*2.5},255)`" stroke="black" d="M12,2L4.5,20.29L5.21,21L12,18L18.79,21L19.5,20.29L12,2Z"/>
                </svg>
            </div>
            <div id="text">forzamap.online<br>
                <a href="https://twitter.com/Bre77">Created by @Bre77</a><br>
                {{Object.keys(cars).length}} cars on the map<br>
                {{Math.round(viewz*100)/100}}x zoom<template v-if="seen"><br>
                X {{Math.round(playerx*1000)/1000}} m<br>
                Y {{Math.round(playery*1000)/1000}} m<br>
                D {{Math.round(playerd*1000)/1000}} rads<br>
                S {{Math.round(players*1000)/1000}} m/s<br>
                </template>
            </div>
            <div id="help" v-if="!seen && !help">
                <h1>Welcome to forzamap.online</h1>
                Telemetry sent to this services is <u>public</u>, but your IP address will be hashed for privacy. You will see other players on your map.<br><br>
                To join, in Forza Horizon 5, go to <b>SETTINGS</b>, then <b>HUD AND GAMEPLAY</b>, then at the bottom set the following:<br><br>
                <img src="/config.png" title="DATA OUT IP ADDRESS = forzamap.online   DATA OUT IP PORT = 5555" alt="Set DATA OUT IP ADDRESS to 'forzamap.online', set DATA OUT IP PORT to '5555'"><br><br>
                You must open this website from the same Public IP address as the game. This box will close once data has been received from your IP.<br>
                This website can consume a very large amount of data, so be cautious using it on a metered connection.<br>
                <div id="close" @click="help=1">Close X</div>
            </div>
        </div>
        <script>
            const imagex = 3840
            const imagey = 2160
            const factorx = -5.0475
            const offsetx = -391
            const factory = 5.0475
            const offsety = -92
            const zoom = 1.1
            var previousEvent

            const app = new Vue({
                el: '#app',
                data: {
                    uid: uid,
                    cars: {},
                    playerx: 0,
                    playery: 0,
                    playerz: 0,
                    playerd: 0,
                    players: 0,
                    viewx: 0,
                    viewy: 0,
                    viewz: 1,
                    middlex: window.innerWidth/2,
                    middley: window.innerHeight/2,
                    seen: 0,
                    help: false,
                },
                created() {
                    window.addEventListener("resize", this.resize);
                    window.addEventListener('wheel', this.onwheel);
                    window.addEventListener('mousedown', this.draggable);
                    const stream = new EventSource("/data")
                    stream.onmessage = function(ev){
                        try {
                            data = JSON.parse(ev.data)
                        }
                        catch(err) {
                            return
                        }
                        for (let uid in data){

                        
                            if(uid == app.uid){
                                app.playerz = data[uid][0]
                                app.playerx = data[uid][1]
                                app.playery = data[uid][2]
                                app.playerd = data[uid][3]
                                app.players = data[uid][4]
                                app.seen = true
                            } else {
                                app.$set(app.cars,uid,{z:data[uid][0],x:data[uid][1],y:data[uid][2],d:data[uid][3],s:data[uid][4],t:Date.now()})
                            }
                        }
                    };
                    setInterval(()=>{
                        const n = Date.now()-30000
                        for(const id in app.cars){
                            if(app.cars[id].t < n){
                                app.$delete(app.cars,id)
                            }
                        }
                    },1000)
                },
                destroyed() {
                    window.removeEventListener("resize", this.resize);
                    window.removeEventListener("wheel", this.onwheel);
                    window.removeEventListener("mousedown", this.draggable);
                },
                computed: {
                    player() { // Player Car offset from map middle
                        return {
                            x: ((this.playerx/factorx) + offsetx) * this.viewz,
                            y: ((this.playery/factory) + offsety) * this.viewz
                        }
                    },
                    playerstyle() { // Player location adjusted for map movement
                        let x = this.middlex - 12 + this.viewx
                        let y = this.middley - 12 + this.viewy
                        return {left: x+'px', top: y+'px', transform: 'rotate('+this.playerd+'rad)'}
                    },
                    map() {
                        let x = this.viewx + this.middlex - (imagex * this.viewz)/2 + this.player.x
                        let y = this.viewy + this.middley - (imagey * this.viewz)/2 + this.player.y
                        return {'background-position': x+'px '+y+'px','background-size': (imagex * this.viewz)+'px '+(imagey * this.viewz)+'px'}
                    },
                },
                methods: {
                    resize() {
                        this.middlex = window.innerWidth/2
                        this.middley = window.innerHeight/2
                    },
                    position(carx,cary,card,carz){
                        let x = this.middlex - 12 - ((carx/factorx) + offsetx) * this.viewz + this.viewx  + this.player.x
                        let y = this.middley - 12 - ((cary/factory) + offsety) * this.viewz + this.viewy + this.player.y
                        if(x < -12 || y < -12 || x > window.innerWidth + 12 || y > window.innerHeight + 12){
                            return {visibility: 'hidden'}
                        }
                        return {transform: `rotate(${card}rad) scale(1)`, left: x+'px', top: y+'px',  }
                    },
                    draggable(e) {
                        e.preventDefault();
                        previousEvent = e;
                        document.addEventListener('mousemove', this.drag);
                        document.addEventListener('mouseup', this.removeDrag);
                    },
                    drag(e) {
                        e.preventDefault();
                        this.viewx += (e.pageX - previousEvent.pageX);
                        this.viewy += (e.pageY - previousEvent.pageY);
                        previousEvent = e;
                    },
                    removeDrag() {
                        document.removeEventListener('mouseup', this.removeDrag);
                        document.removeEventListener('mousemove', this.drag);
                    },
                    onwheel(e) {
			            var deltaY = 0;

                        if (e.deltaY) { // FireFox 17+ (IE9+, Chrome 31+?)
                            deltaY = e.deltaY;
                        } else if (e.wheelDelta) {
                            deltaY = -e.wheelDelta;
                        }

                        // Update the bg size:
                        if (deltaY < 0) {
                            this.viewz *= zoom
                            this.viewx *= zoom
                            this.viewy *= zoom
                        } else {
                            this.viewz /= zoom
                            this.viewx /= zoom
                            this.viewy /= zoom
                        }
                    }
                }
            })
        </script>
    </body>
</html>
